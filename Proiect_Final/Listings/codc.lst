C51 COMPILER V9.60.7.0   CODC                                                              05/25/2024 18:30:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CODC
OBJECT MODULE PLACED IN .\Objects\codc.obj
COMPILER INVOKED BY: C:\Program Files\C51\BIN\C51.EXE codc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\codc.lst) TABS(2) OBJECT(.\Objects\codc.obj)

line level    source

   1          #include <REG51.H>
   2          sfr LCD = 0xA0;
   3          sbit RS = P3^0;
   4          sbit RW = P3^1;
   5          sbit EN = P3^2;
   6          sbit RELAY = P3^7;
   7          sbit BUTTON_PLUS = P0^0;
   8          sbit BUTTON_MINUS = P0^1;
   9          
  10          unsigned char temp_ref = 20; // Tensiunea de referinta din incapere
  11          unsigned char temp_actuala = 0; // Variabila pentru temperatura actuala
  12          unsigned char humidity = 0; // Variabila pentru umiditate
  13          
  14          void LCD_CMD(unsigned char x);
  15          void LCD_DATA(unsigned char w);
  16          void LCD_INI(void);
  17          void Send_Data(unsigned char *Str);
  18          void msDelay(unsigned int);
  19          void display_actual_temp(unsigned char value);
  20          void display_set_temp(unsigned char value);
  21          void display_humidity(unsigned char value);
  22          void ADC();
  23          void check_buttons();
  24          void timer1_delay_1ms(unsigned int delay);
  25          void heart();
  26          void caracter();
  27          void omulet();
  28          
  29          void main(void)
  30          {
  31   1          P0 |= 0x03; // Setez butoanele initial ca fiind neapasate
  32   1          msDelay(200);  // 0.2 secunde
  33   1          LCD_INI(); // Initializarea LCD
  34   1      
  35   1          LCD_CMD(0x80);
  36   1          Send_Data("Temp.actuala:"); // Scrie mesaj pe LCD
  37   1          msDelay(200);  // 0.2 secunde
  38   1          LCD_CMD(0xC0);
  39   1          Send_Data("Temp.setata:"); // Scrie mesaj pe LCD    
  40   1          msDelay(200);  // 0.2 secunde
  41   1          LCD_CMD(0x90);
  42   1          Send_Data("Umiditatea:"); // Scrie mesaj pe LCD linia 3
  43   1          msDelay(200);  // 0.2 secunde
  44   1          LCD_CMD(0xD0);
  45   1          Send_Data("Caract.spec.:"); // Scrie mesaj pe LCD linia 4
  46   1          msDelay(200);  // 0.2 secunde
  47   1      
  48   1          heart(); 
  49   1          caracter();
  50   1          omulet();
  51   1          
  52   1          while (1) {
  53   2              check_buttons();
  54   2              ADC();
C51 COMPILER V9.60.7.0   CODC                                                              05/25/2024 18:30:19 PAGE 2   

  55   2              display_actual_temp(temp_actuala);
  56   2              display_set_temp(temp_ref);
  57   2              display_humidity(temp_actuala);
  58   2          }
  59   1      }
  60          
  61          void ADC()
  62          {
  63   1          temp_actuala = P1; // Simulare citire temperatura actuala de la un ADC
  64   1          humidity = P2; // Simulare citire umiditate de la un ADC
  65   1      
  66   1          // Control releu
  67   1          if (temp_ref > temp_actuala) { // Se verifica daca temperatura setata este mai mare decat cea actuala
  68   2              RELAY = 0; // Pornire releu (LED aprins)
  69   2          } else {
  70   2              RELAY = 1; // Oprire releu (LED stins)
  71   2          }
  72   1      }
  73          
  74          void check_buttons() {
  75   1          if (BUTTON_PLUS == 0) { // Se verifica daca "+" este apasat
  76   2              msDelay(20); // Debouncing
  77   2              while (BUTTON_PLUS == 0); // Asteapta eliberarea butonului
  78   2              temp_ref++;
  79   2          }
  80   1      
  81   1          if (BUTTON_MINUS == 0) { // Se verifica daca "-" este apasat
  82   2              msDelay(20); // Debouncing
  83   2              while (BUTTON_MINUS == 0); // Asteapta eliberarea butonului
  84   2              temp_ref--;
  85   2          }
  86   1      }
  87          
  88          void display_actual_temp(unsigned char value)
  89          {
  90   1          unsigned char tens, units;
  91   1      
  92   1          // Set cursor position for actual temperature
  93   1          LCD_CMD(0x8D); // Prima linie
  94   1          value = P1;
  95   1          tens = (value / 0x06) / 10; // Obtinerea cifrei zecilor
  96   1          tens = tens + 0x30;
  97   1          units = (value / 0x06) % 10; // Obtinerea cifrei unitatilor
  98   1          units = units + 0x30;
  99   1      
 100   1          LCD_DATA(tens); // Afisarea primei cifre
 101   1          LCD_DATA(units); // Afisarea celei de-a doua cifre
 102   1          LCD_DATA(0xDF); // Afisarea simbolului gradului
 103   1      }
 104          
 105          void display_set_temp(unsigned char value)
 106          {
 107   1          unsigned char tens, units;
 108   1      
 109   1          // Set cursor position for set temperature
 110   1          LCD_CMD(0xCD); // A doua linie
 111   1      
 112   1          tens = value / 10; // Obtinerea cifrei zecilor
 113   1          units = value % 10; // Obtinerea cifrei unitatilor
 114   1      
 115   1          LCD_DATA(tens + '0'); // Afisarea primei cifre
 116   1          LCD_DATA(units + '0'); // Afisarea celei de-a doua cifre
C51 COMPILER V9.60.7.0   CODC                                                              05/25/2024 18:30:19 PAGE 3   

 117   1          LCD_DATA(0xDF); // Afisarea simbolului gradului
 118   1      }
 119          
 120          void display_humidity(unsigned char temp_value)
 121          {
 122   1          unsigned char humidity_value;
 123   1          unsigned char tens, units;
 124   1      
 125   1          if (temp_value < 10) {
 126   2              humidity_value = 50 + 2 * (temp_value - 10); 
 127   2          } else {
 128   2              humidity_value = 50 - (10 - temp_value); 
 129   2          }
 130   1      
 131   1          if (humidity_value > 50) {
 132   2              humidity_value = 50;
 133   2          } else if (humidity_value < 0) {
 134   2              humidity_value = 0;
 135   2          }
 136   1      
 137   1          LCD_CMD(0x9D); 
 138   1      
 139   1          tens = humidity_value / 10; // Obtinerea cifrei zecilor
 140   1          units = humidity_value % 10; // Obtinerea cifrei unitatilor
 141   1      
 142   1          LCD_DATA(tens + '0'); // Afisarea primei cifre
 143   1          LCD_DATA(units + '0'); // Afisarea celei de-a doua cifre
 144   1          LCD_DATA('%'); // Afisarea simbolului procent
 145   1      }
 146          
 147          
 148          void LCD_CMD(unsigned char x)
 149          {
 150   1          LCD = x;
 151   1          RS = 0;
 152   1          RW = 0;
 153   1          EN = 1;
 154   1          msDelay(5);
 155   1          EN = 0;
 156   1      }
 157          
 158          void LCD_DATA(unsigned char w)
 159          {
 160   1          LCD = w;
 161   1          RS = 1;
 162   1          RW = 0;
 163   1          EN = 1;
 164   1          msDelay(5);
 165   1          EN = 0;
 166   1      }
 167          
 168          void Send_Data(unsigned char *Str)
 169          {
 170   1          while(*Str) // Bucla pana cand s-au terminat datele
 171   1              LCD_DATA(*Str++); // Trimiterea datelor la LCD una cate una
 172   1      }
 173          
 174          void LCD_INI(void)
 175          {
 176   1          msDelay(250); // Call delay
 177   1          LCD_CMD(0x38); // Comanada pe 8 bits a LCD-ului
 178   1          LCD_CMD(0x0C); // Display ON
C51 COMPILER V9.60.7.0   CODC                                                              05/25/2024 18:30:19 PAGE 4   

 179   1          LCD_CMD(0x01); // Clear LCD
 180   1          LCD_CMD(0x06); // Entry mode set
 181   1          LCD_CMD(0x80); // Set cursor at beginning of first line
 182   1      }
 183          
 184          void msDelay(unsigned int Time)
 185          {
 186   1          while (Time--)
 187   1              timer1_delay_1ms(1); // Delay de 1ms folosing Timer1
 188   1      }
 189          
 190          void timer1_delay_1ms(unsigned int delay)
 191          {
 192   1          unsigned int i;
 193   1          TMOD |= 0x10;  // Timer1 in mode 1 
 194   1          TH1 = 0xEE;    // Initial value for 1ms delay at 11.0592 MHz
 195   1          TL1 = 0x00;
 196   1          TR1 = 1;       // Start Timer1
 197   1      
 198   1          for (i = 0; i < delay; i++) {
 199   2              while (!TF1); // Wait until Timer1 overflow
 200   2              TF1 = 0;      // Clear overflow flag
 201   2          }
 202   1      
 203   1          TR1 = 0;       // Stop Timer1
 204   1      }
 205          
 206          void heart()
 207          {
 208   1          LCD_CMD(64); // Set CGRAM address for the heart character
 209   1          LCD_DATA(0x00);
 210   1          LCD_DATA(0x0A);
 211   1          LCD_DATA(0x1F);
 212   1          LCD_DATA(0x1F);
 213   1          LCD_DATA(0x0E);
 214   1          LCD_DATA(0x04);
 215   1          LCD_DATA(0x00);
 216   1          LCD_DATA(0x00);
 217   1      
 218   1          LCD_CMD(0xDD); // Set cursor position for heart character on line 4
 219   1          LCD_DATA(0); // Display heart character
 220   1          msDelay(10);
 221   1      }
 222          
 223          void caracter()
 224          {
 225   1          LCD_CMD(72); // Set CGRAM address for the custom character
 226   1          LCD_DATA(0x00);
 227   1          LCD_DATA(0x0A);
 228   1          LCD_DATA(0x0A);
 229   1          LCD_DATA(0x0A);
 230   1          LCD_DATA(0x11);
 231   1          LCD_DATA(0x0E);
 232   1          LCD_DATA(0x00);
 233   1          LCD_DATA(0x00);
 234   1      
 235   1          LCD_CMD(0xDE); // Set cursor position for custom character on line 4
 236   1          LCD_DATA(1); // Display custom character
 237   1          msDelay(10);
 238   1      }
 239          
 240          void omulet()
C51 COMPILER V9.60.7.0   CODC                                                              05/25/2024 18:30:19 PAGE 5   

 241          {
 242   1          LCD_CMD(80); // Set CGRAM address for the custom character
 243   1          LCD_DATA(0x0E);
 244   1          LCD_DATA(0x0E);
 245   1          LCD_DATA(0x0E);
 246   1          LCD_DATA(0x04);
 247   1          LCD_DATA(0x1F);
 248   1          LCD_DATA(0x04);
 249   1          LCD_DATA(0x1F);
 250   1          LCD_DATA(0x11);
 251   1      
 252   1          LCD_CMD(0xDF); // Set cursor position for custom character on line 4
 253   1          LCD_DATA(2); // Display custom character
 254   1          msDelay(10);
 255   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    691    ----
   CONSTANT SIZE    =     53    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
